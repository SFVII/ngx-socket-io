import { __decorate, __metadata, __param } from "tslib";
import { EventEmitter, Inject, Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
import * as io from 'socket.io-client';
import { DefaultSocketConfig } from './config/default';
//import {SOCKET_CONFIG_TOKEN} from './socket-front-update.module';
// @dynamic
let SocketWrapper = class SocketWrapper {
    constructor(Config) {
        this.Config = Config;
        this.tokenUpdater = new EventEmitter();
        this.subscribersCounter = 0;
        this.roomList = [];
        this.SocketConfig = DefaultSocketConfig;
        this.Config = Config;
        if (!this.SocketConfig) {
            this.SocketConfig = {};
        }
        for (let key in Config) {
            if (key.includes('socket_')) {
                this.SocketConfig[key.replace('socket_', '')] = Config[key];
            }
        }
        this.url = (!Config || Config && !Config.url) ? '' : Config.url;
        if ((Config && !Config.auth || !Config)) {
            this.socket = this.connect();
            this.onReconnect();
        }
        else {
            this.socket = this.connect();
            this.tokenUpdater.subscribe((token) => {
                this.disconnect();
                if (token) {
                    if (!this.SocketConfig.extraHeaders) {
                        this.SocketConfig.extraHeaders = {};
                    }
                    if (!this.SocketConfig.transportOptions) {
                        this.SocketConfig.transportOptions = {};
                    }
                    for (let en of this.SocketConfig.transports) {
                        this.SocketConfig.transportOptions[en] = {
                            extraHeaders: {
                                Authorization: `Baerer ${token}`
                            }
                        };
                    }
                    this.SocketConfig.extraHeaders.Authorization = `Baerer ${token}`;
                    this.SocketConfig.query.token = `${token}`;
                    this.socket = this.connect();
                    if (Config && Config.loginPage) {
                        this.redirectLogin(Config.loginPage);
                    }
                    this.onReconnect();
                }
            });
        }
    }
    subscribe(name) {
        this.socket.emit('subscribe', name);
        if (this.roomList.indexOf(name) === -1) {
            this.roomList.push(name);
        }
    }
    of(namespace) {
        this.socket.of(namespace);
    }
    on(eventName, callback) {
        this.socket.on(eventName, callback);
    }
    ;
    once(eventName, callback) {
        this.socket.once(eventName, callback);
    }
    ;
    connect() {
        console.log('Config', this.SocketConfig);
        const ioSocket = io.default ? io.default : io;
        return ioSocket(this.url, this.SocketConfig).connect();
    }
    disconnect(close) {
        return this.socket.disconnect.apply(this.socket, arguments);
    }
    emit(eventName, data, callback) {
        this.socket.emit(eventName, data, callback);
    }
    ;
    removeListener(eventName, callback) {
        return this.socket.removeListener.apply(this.socket, arguments);
    }
    ;
    removeAllListeners(eventName) {
        return this.socket.removeAllListeners.apply(this.socket, arguments);
    }
    ;
    fromEvent(eventName) {
        this.subscribersCounter++;
        return new Observable((observer) => {
            this.socket.on(eventName, (data) => {
                observer.next(data);
            });
            return () => {
                if (this.subscribersCounter === 1) {
                    this.socket.removeListener(eventName);
                }
            };
        }).pipe(share());
    }
    ;
    fromOneTimeEvent(eventName) {
        return new Promise(resolve => this.once(eventName, resolve));
    }
    ;
    onReconnect() {
        if (this.socket) {
            this.socket.on('reconnect', () => {
                if (this.roomList && this.roomList.length) {
                    console.log('current rooms', this.roomList.length);
                    this.roomList.forEach((name) => {
                        this.subscribe(name);
                    });
                }
                else {
                    console.log('room is empty');
                }
            });
        }
        else {
            console.log('socket does not exist');
        }
    }
    redirectLogin(loginPage) {
        if (this.socket && loginPage) {
            this.socket.on('session-time-out', (msg) => {
                window.location.replace(loginPage);
            });
        }
    }
};
SocketWrapper.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: ['__SocketWrapper__',] }] }
];
SocketWrapper = __decorate([
    Injectable(),
    __param(0, Inject('__SocketWrapper__')),
    __metadata("design:paramtypes", [Object])
], SocketWrapper);
export { SocketWrapper };
//# sourceMappingURL=data:application/json;base64,