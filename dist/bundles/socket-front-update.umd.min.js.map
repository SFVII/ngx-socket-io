{"version":3,"sources":["ng://socket-front-update/lib/config/config-token.ts","ng://socket-front-update/lib/config/default.ts","ng://socket-front-update/lib/core/SocketWrapper.ts","ng://socket-front-update/lib/factory/SocketFactory.ts","ng://socket-front-update/lib/socket-front-update.module.ts"],"names":["SOCKET_CONFIG_TOKEN","InjectionToken","Math","floor","random","toString","DefaultSocketConfig","url","path","reconnection","reconnectionAttempts","Infinity","reconnectionDelay","reconnectionDelayMax","randomizationFactor","timeout","autoConnect","query","transports","extraHeaders","SocketWrapper","Config","_this","this","tokenUpdater","EventEmitter","subscribersCounter","config","auth","socket","connect","subscribe","token","Authorization","redirectLogin","loginPage","prototype","roomData","name","callback","join","on","of","namespace","eventName","once","io.default","io","disconnect","close","apply","arguments","emit","data","removeListener","removeAllListeners","fromEvent","Observable","observer","next","pipe","share","fromOneTimeEvent","Promise","resolve","msg","window","location","replace","SocketFactory","SocketFrontUpdateModule","forRoot","ngModule","providers","provide","useValue","useFactory","deps"],"mappings":"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","sourcesContent":["/***********************************************************\n **  @project ngx-front-live-update                       **\n **  @file config-token                                   **\n **  @author Brice Daupiard <brice.daupiard@smartiiz.com> **\n **  @Date 26/03/2021                                     **\n ***********************************************************/\nimport {InjectionToken} from '@angular/core';\n\n\nexport const SOCKET_CONFIG_TOKEN = new InjectionToken('__SOCKET_IO_CONFIG_' +\n  Math.floor(Math.random() * Math.floor(100)).toString() + '__');\n","/***********************************************************\n **  @project ngx-front-live-update                              **\n **  @file default                                         **\n **  @author Brice Daupiard <brice.daupiard@smartiiz.com>  **\n **  @Date 26/03/2021                                         **\n ***********************************************************/\n\n\nexport const DefaultSocketConfig = {\n  url : '',\n  path: '/socket.io',\n  reconnection: true,\n  reconnectionAttempts: Infinity,\n  reconnectionDelay: 1000,\n  reconnectionDelayMax: 5000,\n  randomizationFactor: 0.5,\n  timeout: 20000,\n  autoConnect: true,\n  query: {},\n  transports: ['polling', 'websocket'],\n  extraHeaders: {}\n};\n","/***********************************************************\n **  @project ngx-front-live-update                              **\n **  @file SocketWrapper                                         **\n **  @author Brice Daupiard <brice.daupiard@smartiiz.com>  **\n **  @Date 26/03/2021                                         **\n ***********************************************************/\nimport {EventEmitter} from '@angular/core';\nimport {SocketIoConfig} from '../interface/Interface-config';\nimport {DefaultSocketConfig} from '../config/default';\nimport {Observable} from 'rxjs';\nimport {share} from 'rxjs/operators';\nimport * as io from 'socket.io-client';\n\n\nexport class SocketWrapper {\n  public tokenUpdater: any = new EventEmitter();\n  public socket: any;\n  private subscribersCounter: number = 0;\n  private url: string;\n  // tslint:disable-next-line:max-line-length\n  private config: { path?: string; autoConnect?: boolean; transports?: string[]; query?: {}; reconnectionDelayMax?: number; extraHeaders?: {}; reconnection?: boolean; reconnectionAttempts?: number; timeout?: number; reconnectionDelay?: number; randomizationFactor?: number } | SocketIoConfig;\n\n  constructor(public Config?: { url?: string; config?: SocketIoConfig, auth?: boolean, loginPage?: string }) {\n    this.config = !Config ? DefaultSocketConfig : Config.config;\n    this.url = !Config ? '' : Config.url;\n    if (Config && !Config.auth) {\n      this.socket = this.connect();\n    } else {\n      this.tokenUpdater.subscribe((token: string) => {\n        if (token) {\n          this.config.extraHeaders.Authorization = `Baerer ${token}`;\n          this.socket = this.connect();\n          this.redirectLogin(Config.loginPage);\n        }\n      });\n    }\n  }\n\n  roomData(name: string, callback: () => void) {\n    this.socket.join(name);\n    this.socket.on(name, callback);\n  }\n\n  of(namespace: string): void {\n    this.socket.of(namespace);\n  };\n\n  on(eventName: string, callback: (data: any) => void): void {\n    this.socket.on(eventName, callback);\n  };\n\n  once(eventName: string, callback: (data: any) => void): void {\n    this.socket.once(eventName, callback);\n  };\n\n  connect() {\n    const ioSocket = (io as any).default ? (io as any).default : io;\n    return ioSocket(this.url, this.config).connect();\n  }\n\n  disconnect(close?: any): any {\n    return this.socket.disconnect.apply(this.socket, arguments);\n  }\n\n  emit(eventName: string, data?: any, callback?: (data: any) => void): any {\n    this.socket.emit(eventName, data, callback);\n  };\n\n  removeListener(eventName: string, callback?: () => void): any {\n    return this.socket.removeListener.apply(this.socket, arguments);\n  };\n\n  removeAllListeners(eventName?: string): any {\n    return this.socket.removeAllListeners.apply(this.socket, arguments);\n  };\n\n  fromEvent<T>(eventName: string): Observable<any> {\n    this.subscribersCounter++;\n    return new Observable((observer: any) => {\n      this.socket.on(eventName, (data: any) => {\n        observer.next(data);\n      });\n      return () => {\n        if (this.subscribersCounter === 1) {\n          this.socket.removeListener(eventName);\n        }\n      };\n    }).pipe(share());\n  };\n\n  fromOneTimeEvent<T>(eventName: string): Promise<any> {\n    return new Promise(resolve => this.once(eventName, resolve));\n  };\n\n  private redirectLogin(loginPage: string) {\n    if (this.socket && loginPage) {\n      this.socket.on('session-time-out', (msg: any) => {\n        window.location.replace(loginPage);\n      });\n    }\n  }\n\n}\n","/***********************************************************\n **  @project ngx-front-live-update                              **\n **  @file SocketFactory                                         **\n **  @author Brice Daupiard <brice.daupiard@smartiiz.com>  **\n **  @Date 26/03/2021                                         **\n ***********************************************************/\nimport {SocketIoConfig} from '../interface/Interface-config';\nimport {SocketWrapper} from '../core/SocketWrapper';\n\nexport const SocketFactory = (config: { url?: string, config?: { path?: string; autoConnect?: boolean; transports?: string[]; query?: {}; reconnectionDelayMax?: number; extraHeaders?: {}; reconnection?: boolean; reconnectionAttempts?: number; timeout?: number; reconnectionDelay?: number; randomizationFactor?: number } | SocketIoConfig, auth?: boolean, loginPage?: string  }) => {\n  return new SocketWrapper(config);\n};\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {SocketIoConfig} from './interface/Interface-config';\nimport {SOCKET_CONFIG_TOKEN} from './config/config-token';\nimport {SocketWrapper} from './core/SocketWrapper';\nimport {SocketFactory} from './factory/SocketFactory';\n\n@NgModule({})\nexport class SocketFrontUpdateModule {\n  public static forRoot(config: { url?: string, config?: SocketIoConfig, auth?: boolean, loginPage?: string }): ModuleWithProviders<SocketFrontUpdateModule> {\n    return {\n      ngModule: SocketFrontUpdateModule,\n      providers: [\n        {provide: SOCKET_CONFIG_TOKEN, useValue: config},\n        {\n          provide: SocketWrapper,\n          useFactory: SocketFactory,\n          deps: [SOCKET_CONFIG_TOKEN]\n        }\n      ]\n    };\n  }\n}\n\nexport {SocketFrontUpdateModule as SocketIoModule, SocketWrapper as Socket, SOCKET_CONFIG_TOKEN, SocketFactory};\n"]}