{"version":3,"sources":["ng://socket-front-update/lib/config/config-token.ts","ng://socket-front-update/lib/config/default.ts","ng://socket-front-update/lib/core/SocketWrapper.ts","ng://socket-front-update/lib/factory/SocketFactory.ts","ng://socket-front-update/lib/socket-front-update.module.ts"],"names":["SOCKET_CONFIG_TOKEN","InjectionToken","Math","floor","random","toString","DefaultSocketConfig","url","path","reconnection","reconnectionAttempts","Infinity","reconnectionDelay","reconnectionDelayMax","randomizationFactor","timeout","autoConnect","query","transports","extraHeaders","SocketWrapper","config","this","tokenUpdater","EventEmitter","subscribersCounter","prototype","roomData","name","callback","socket","join","on","of","namespace","eventName","once","connect","io.default","io","disconnect","close","apply","arguments","emit","data","removeListener","removeAllListeners","fromEvent","_this","Observable","observer","next","pipe","share","fromOneTimeEvent","Promise","resolve","SocketFactory","SocketFrontUpdateModule","forRoot","ngModule","providers","provide","useValue","useFactory","deps"],"mappings":"4dASaA,EAAsB,IAAIC,EAAAA,eAAe,sBACpDC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAM,MAAME,WAAa,MCF9CC,EAAsB,CACjCC,IAAM,GACNC,KAAM,aACNC,cAAc,EACdC,qBAAsBC,EAAAA,EACtBC,kBAAmB,IACnBC,qBAAsB,IACtBC,oBAAqB,GACrBC,QAAS,IACTC,aAAa,EACbC,MAAO,GACPC,WAAY,CAAC,UAAW,aACxBC,aAAc,iBCAd,SAAAC,EAAmBb,EAAyBc,QAAzB,IAAAd,IAAAA,EAAA,IAAAe,KAAAf,IAAAA,EAAyBe,KAAAD,OAAAA,EALrCC,KAAAC,aAAoB,IAAIC,EAAAA,aAEvBF,KAAAG,mBAA6B,EAInCH,KAAKD,OAAUA,GAASf,EA2D5B,OAxDEc,EAAAM,UAAAC,SAAA,SAASC,EAAcC,GACrBP,KAAKQ,OAAOC,KAAKH,GACjBN,KAAKQ,OAAOE,GAAGJ,EAAMC,IAGvBT,EAAAM,UAAAO,GAAA,SAAGC,GACDZ,KAAKQ,OAAOG,GAAGC,IAGjBd,EAAAM,UAAAM,GAAA,SAAGG,EAAmBN,GACpBP,KAAKQ,OAAOE,GAAGG,EAAWN,IAG5BT,EAAAM,UAAAU,KAAA,SAAKD,EAAmBN,GACtBP,KAAKQ,OAAOM,KAAKD,EAAWN,IAG9BT,EAAAM,UAAAW,QAAA,WAEE,OADkBC,GAA2CC,GAC7CjB,KAAKf,IAAKe,KAAKD,QAAQgB,WAGzCjB,EAAAM,UAAAc,WAAA,SAAWC,GACT,OAAOnB,KAAKQ,OAAOU,WAAWE,MAAMpB,KAAKQ,OAAQa,YAGnDvB,EAAAM,UAAAkB,KAAA,SAAKT,EAAmBU,EAAYhB,GAClCP,KAAKQ,OAAOc,KAAKT,EAAWU,EAAMhB,IAGpCT,EAAAM,UAAAoB,eAAA,SAAeX,EAAmBN,GAChC,OAAOP,KAAKQ,OAAOgB,eAAeJ,MAAMpB,KAAKQ,OAAQa,YAGvDvB,EAAAM,UAAAqB,mBAAA,SAAmBZ,GACjB,OAAOb,KAAKQ,OAAOiB,mBAAmBL,MAAMpB,KAAKQ,OAAQa,YAG3DvB,EAAAM,UAAAsB,UAAA,SAAab,GAAb,IAAAc,EAAA3B,KAEE,OADAA,KAAKG,qBACE,IAAIyB,EAAAA,YAAW,SAACC,GAIrB,OAHAF,EAAKnB,OAAOE,GAAGG,GAAW,SAACU,GACzBM,EAASC,KAAKP,MAET,WAC2B,IAA5BI,EAAKxB,oBACPwB,EAAKnB,OAAOgB,eAAeX,OAG9BkB,KAAKC,EAAAA,UAGVlC,EAAAM,UAAA6B,iBAAA,SAAoBpB,GAApB,IAAAc,EAAA3B,KACE,OAAO,IAAIkC,SAAQ,SAAAC,GAAW,OAAAR,EAAKb,KAAKD,EAAWsB,OAGvDrC,KCvEasC,EAAgB,SAACnD,EAAkBc,GAC9C,YAD4B,IAAAd,IAAAA,EAAA,IACrB,IAAIa,EAAcb,EAAKc,iBCJhC,SAAAsC,YAEgBA,EAAAC,QAAd,SAAsBvC,GACpB,MAAO,CACLwC,SAAUF,EACVG,UAAW,CACT,CAACC,QAAS/D,EAAqBgE,SAAU3C,GACzC,CACE0C,QAAS3C,EACT6C,WAAYP,EACZQ,KAAM,CAAClE,uCATJ2D,iEAAAA","sourcesContent":["/***********************************************************\n **  @project ngx-front-live-update                       **\n **  @file config-token                                   **\n **  @author Brice Daupiard <brice.daupiard@smartiiz.com> **\n **  @Date 26/03/2021                                     **\n ***********************************************************/\nimport {InjectionToken} from '@angular/core';\n\n\nexport const SOCKET_CONFIG_TOKEN = new InjectionToken('__SOCKET_IO_CONFIG_' +\n  Math.floor(Math.random() * Math.floor(100)).toString() + '__');\n","/***********************************************************\n **  @project ngx-front-live-update                              **\n **  @file default                                         **\n **  @author Brice Daupiard <brice.daupiard@smartiiz.com>  **\n **  @Date 26/03/2021                                         **\n ***********************************************************/\n\n\nexport const DefaultSocketConfig = {\n  url : '',\n  path: '/socket.io',\n  reconnection: true,\n  reconnectionAttempts: Infinity,\n  reconnectionDelay: 1000,\n  reconnectionDelayMax: 5000,\n  randomizationFactor: 0.5,\n  timeout: 20000,\n  autoConnect: true,\n  query: {},\n  transports: ['polling', 'websocket'],\n  extraHeaders: {}\n};\n","/***********************************************************\n **  @project ngx-front-live-update                              **\n **  @file SocketWrapper                                         **\n **  @author Brice Daupiard <brice.daupiard@smartiiz.com>  **\n **  @Date 26/03/2021                                         **\n ***********************************************************/\nimport {EventEmitter} from '@angular/core';\nimport {SocketIoConfig} from '../interface/Interface-config';\nimport {DefaultSocketConfig} from '../config/default';\nimport {Observable} from 'rxjs';\nimport {share} from 'rxjs/operators';\nimport * as io from 'socket.io-client';\n\n\nexport class SocketWrapper {\n  public tokenUpdater: any = new EventEmitter();\n  public socket: any;\n  private subscribersCounter: number = 0;\n\n  // tslint:disable-next-line:max-line-length\n  constructor(public url: string = '', public config?: { path: string; autoConnect: boolean; transports: string[]; query: {}; reconnectionDelayMax: number; extraHeaders: {}; reconnection: boolean; reconnectionAttempts: number; timeout: number; reconnectionDelay: number; randomizationFactor: number } | SocketIoConfig) {\n    this.config = !config ? DefaultSocketConfig : config;\n  }\n\n  roomData(name: string, callback: () => void) {\n    this.socket.join(name);\n    this.socket.on(name, callback);\n  }\n\n  of(namespace: string): void {\n    this.socket.of(namespace);\n  };\n\n  on(eventName: string, callback: (data: any) => void): void {\n    this.socket.on(eventName, callback);\n  };\n\n  once(eventName: string, callback: (data: any) => void): void {\n    this.socket.once(eventName, callback);\n  };\n\n  connect() {\n    const ioSocket = (io as any).default ? (io as any).default : io;\n    return ioSocket(this.url, this.config).connect();\n  }\n\n  disconnect(close?: any): any {\n    return this.socket.disconnect.apply(this.socket, arguments);\n  }\n\n  emit(eventName: string, data?: any, callback?: (data: any) => void): any {\n    this.socket.emit(eventName, data, callback);\n  };\n\n  removeListener(eventName: string, callback?: () => void): any {\n    return this.socket.removeListener.apply(this.socket, arguments);\n  };\n\n  removeAllListeners(eventName?: string): any {\n    return this.socket.removeAllListeners.apply(this.socket, arguments);\n  };\n\n  fromEvent<T>(eventName: string): Observable<any> {\n    this.subscribersCounter++;\n    return new Observable((observer: any) => {\n      this.socket.on(eventName, (data: any) => {\n        observer.next(data);\n      });\n      return () => {\n        if (this.subscribersCounter === 1) {\n          this.socket.removeListener(eventName);\n        }\n      };\n    }).pipe(share());\n  };\n\n  fromOneTimeEvent<T>(eventName: string): Promise<any> {\n    return new Promise(resolve => this.once(eventName, resolve));\n  };\n\n}\n","/***********************************************************\n **  @project ngx-front-live-update                              **\n **  @file SocketFactory                                         **\n **  @author Brice Daupiard <brice.daupiard@smartiiz.com>  **\n **  @Date 26/03/2021                                         **\n ***********************************************************/\nimport {SocketIoConfig} from '../interface/Interface-config';\nimport {SocketWrapper} from '../core/SocketWrapper';\n\nexport const SocketFactory = (url: string = '', config: { path: string; autoConnect: boolean; transports: string[]; query: {}; reconnectionDelayMax: number; extraHeaders: {}; reconnection: boolean; reconnectionAttempts: number; timeout: number; reconnectionDelay: number; randomizationFactor: number } | SocketIoConfig) => {\n  return new SocketWrapper(url, config);\n};\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {SocketIoConfig} from './interface/Interface-config';\nimport {SOCKET_CONFIG_TOKEN} from './config/config-token';\nimport {SocketWrapper} from './core/SocketWrapper';\nimport {SocketFactory} from './factory/SocketFactory';\n\n@NgModule({})\nexport class SocketFrontUpdateModule {\n  public static forRoot(config: { url: string, config: SocketIoConfig }): ModuleWithProviders<SocketFrontUpdateModule> {\n    return {\n      ngModule: SocketFrontUpdateModule,\n      providers: [\n        {provide: SOCKET_CONFIG_TOKEN, useValue: config},\n        {\n          provide: SocketWrapper,\n          useFactory: SocketFactory,\n          deps: [SOCKET_CONFIG_TOKEN]\n        }\n      ]\n    };\n  }\n}\n\nexport {SocketFrontUpdateModule as SocketIoModule, SocketWrapper as Socket, SOCKET_CONFIG_TOKEN, SocketFactory};\n"]}